[{"categories":null,"contents":"ZeroSupper 專案介紹 當初，我跟三個朋友都是漢堡控，腦袋裡全是漢堡，於是我們決定一起創業，開了一間小型漢堡店，名叫 ZeroSupper。我們四個就像剛拿到超能力的小孩，熱血沸騰地覺得這是一個完美的機會！不僅能賺點小錢，還能天天享受美食，甚至想著要創造出獨特的用餐體驗，讓客人都成為我們的忠實粉絲，簡直就是夢想中的「漢堡帝國」。\n最初，我們從設計菜單、選擇店面，選擇廠商，每天半夜到市場拿食材，到手把手製作每一個漢堡，忙得像狗一樣！每天都累得像是打了300場傳說，卻還是充滿了幹勁，因為我們相信，終有一天，會有人為了我們的漢堡每天來吃！不過，說實話，那時候我們根本不知道該怎麼開店，只知道漢堡好吃就對了。搞得好像所有人都會因為吃了我們的漢堡而感動流淚，真是有夠囂張的🤣🤣🤣！\n那時候的我們每天都過得很開心，但後來遇到疫情還有一些變數所以就收掉了。所以我後來決定把它做成網頁當作我們四個人的回憶\n特別感謝：我的後端 Spring Boot 技術是從這裡學習的，真的非常感謝古古老師的幫忙，透過這門課程我才可以將後端系統順利應用到這個專案中。\n以下是通往課程的地方有興趣的朋友也可以去支持古古老師:\nSpring Boot 課程連結 前端專案 🔗 My-ZeroSupper-project 這是我為 ZeroSupper 漢堡店的前端GitHub專案，負責現代網頁技術提供流暢的用戶體驗。\n後端專案 🔗 My-SpringBoot-Project 這是我使用 Spring Boot 技術打造的GitHub專案，負責管理訂單和用戶資料，確保系統穩定運行。\n在這個專案中，我獨立設計開發了一個前後端分離的網頁系統，為我當初跟朋友創業的小型漢堡店實現了以下功能：\n用戶註冊與登入系統：實現了用戶註冊、登入、登出功能，並保護用戶資料安全。 線上訂購與購物車：用戶可以在線選擇餐點，加至購物車並進行結算，極大提升了用戶的點餐體驗。 訂單通知系統：系統會自動發送訂單確認郵件給用戶與商家，確保訂單處理的透明性與即時性。 多頁面設計：網站設有首頁、菜單、餐廳位置等多個功能頁面，並透過使用 Vue.js、CSS 和 HTML 提供流暢的用戶介面。 後端服務與數據管理：使用 Spring Boot 和 MySQL 整合資料庫進行訂單與用戶數據的管理，確保數據的持久化和系統的穩定性。 後台管理功能：後台功能僅限特定帳號使用，提升系統的安全性。 雖然目前沒有實現金流功能，但透過此專案，我不僅提升了開發的能力，也深刻理解了開發過程中的許多挑戰。未來，我希望能繼續進步，解決尚未完成的部分。\nZeroSupper 功能示範影片： 注意：影片中的部分內容是我自己亂加的，純屬搞笑，請不要當真！😂\n註冊會員 登入會員 線上點餐 後台管理 想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black7/","tags":null,"title":"ZeroSupper 網頁專案"},{"categories":null,"contents":" 在這個小專案中，我使用了 Python 並結合 ChatGPT API，開發出幾項功能的 AI 聊天系統，旨在模擬 AI 助手與使用者之間的對話。以下是專案的主要功能：\n聊天功能：透過 ChatGPT API，讓用戶能進行自然語言對話，模擬 AI 助手角色。\n檔案分析：用戶可以上傳圖檔及 txt 文件，系統會對這些檔案進行內容分析，提供回應。\nGoogle 第三方登入：實現了 Google 帳號的第三方登入功能，讓用戶能夠輕鬆登入系統，提升使用體驗。\n資料庫管理：使用 MongoDB 存儲使用者資料與對話紀錄，確保資料的可靠性與擴展性。\n臨時網址：透過 Ngrok 生成暫時的公開網址，方便系統測試與演示。\n這項小專案是我哥哥提出的挑戰，因為剛從養成班畢業時我對這類的東西完全不熟悉，幾乎毫無頭緒。幸運的是，現代 AI 工具提供了極大的幫助，讓我大概知道了這個技術並成功完成了這些功能。這次經驗讓我對技術的學習和應用有了更深刻的體會。\n有興趣的朋友可以參考我的 GitHub 專案：My-GPT-Project2，歡迎進行功能修改與擴展。\n功能總覽 基本 AI 聊天 Google 第三方登入 圖片、文件上傳與分析 MongoDB 紀錄資料 此專案可能需要進一步調整部分功能，但已經可以提供基本的 AI 聊天體驗。\n設置與執行步驟 1. 修改 .env 文件 請在 .env 文件中修改成自己的 OpenAI API 金鑰及其他所需的金鑰。\n2. 執行 Web 伺服器 pip3 install -r requirements.txt\npython3 app.py\n支援的作業系統 Windows Linux MacOS 簡易示範影片： 想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black6/","tags":null,"title":"小黑簡易ＡＩ聊天"},{"categories":null,"contents":" 使用系統：Ubuntu22.04.4_Desktop 簡介 在伺服器遷移、備份或重新部署的情境下，能夠有效地在兩台 Linux 主機之間轉移資料是非常重要的。 本文將介紹如何使用 Linux 指令來完成資料庫、網站設定、用戶家目錄的打包與轉移，並展示操作流程。\n參考資源 Linux 檔案與目錄管理參考網站 檔案與檔案系統的壓縮參考網站 Linux Shell Scripts參考網站 操作流程 1. 在 A 和 B 主機上安裝必要的服務 更新軟件包列表並安裝 Apache 和 MariaDB 在 A 和 B 主機上進行相同的安裝操作：\nsudo apt update\nsudo apt install mariadb-server apache2\n2. 啟動 Apache 服務並設定開機自啟 sudo systemctl start apache2\nsudo systemctl enable apache2\n3. 在 B 主機上安裝 OpenSSH 為了讓 A 主機可以通過 SSH 與 B 主機通信，需在 B 主機上安裝 OpenSSH：\nsudo apt update\nsudo apt install openssh-server\n4. 確認 SSH 服務是否成功啟動 sudo systemctl start ssh\nsudo ss -tuln | grep :22\n在 A 主機上打包資料並傳輸至 B 主機 1. 編寫打包與傳輸腳本 建立並編輯 test1.sh 腳本\nnano test1.sh\n2. 為腳本添加執行權限 chmod +x test1.sh\ntest1.sh腳本內容 #!/bin/bash # 設定test1的使用者名稱和IP位址 DEST_USER=test1 # 輸入B主機名稱 DEST_IP=10.167.223.29 # 輸入B主機的IP DEST_PATH=/home/test1/ # 輸入B主機要傳送的位置 # 導出所有資料庫 echo \u0026#34;導出所有MariaDB資料庫...\u0026#34; mysqldump -u black -p[密碼] --all-databases \u0026gt; all_databases.sql # 輸入A主機的名稱跟密碼 # 打包用戶家目錄 echo \u0026#34;打包用戶家目錄...\u0026#34; tar -czvf user1_home.tar.gz /home/black # 更改A主機的名子 # tar -czvf user2_home.tar.gz /home/black2 # 打包Apache配置 echo \u0026#34;打包Apache設定...\u0026#34; tar -czvf apache_configs.tar.gz /etc/apache2 # 打包網站數據 echo \u0026#34;打包網站資料...\u0026#34; tar -czvf apache_www.tar.gz /var/www/html # 使用rsync傳輸 echo \u0026#34;傳輸資料到test1...\u0026#34; echo \u0026#34;傳輸完成。\u0026#34; 在 B 主機上解壓並恢復資料 1. 編寫解壓恢復腳本 建立並編輯 good.sh 腳本\nnano good.sh\n2. 為腳本添加執行權限 chmod +x good.sh\ngood.sh腳本內容 #!/bin/bash # 設定來源路徑 SOURCE_PATH=/home/test1 # 導入資料庫 echo \u0026#34;導入MariaDB資料庫...\u0026#34; mysql -u root -p \u0026lt; $SOURCE_PATH/all_databases.sql # 復原使用者家目錄 echo \u0026#34;恢復使用者家目錄...\u0026#34; tar -xzvf $SOURCE_PATH/user1_home.tar.gz -C / # 恢復Apache配置 echo \u0026#34;恢復Apache設定...\u0026#34; tar -xzvf $SOURCE_PATH/apache_configs.tar.gz -C / # 恢復網站數據 echo \u0026#34;恢復網站資料...\u0026#34; tar -xzvf $SOURCE_PATH/apache_www.tar.gz -C / echo \u0026#34;恢復完成。\u0026#34; 另一種選項：使用臨時目錄解壓並同步資料 如果想使用更安全的方式，可以在臨時目錄解壓縮並使用 rsync 同步資料：\n1. 編寫解壓恢復腳本 建立並編輯 good.sh 腳本\nnano good.sh\n2. 為腳本添加執行權限 chmod +x good.sh\ngood.sh腳本內容 #!/bin/bash # 設定來源路徑 SOURCE_PATH=/home/test1/ # 設定臨時解壓縮路徑 TEMP_PATH=/tmp/recovery # 建立暫存解壓縮目錄 mkdir -p $TEMP_PATH # 導入資料庫 echo \u0026#34;導入MariaDB資料庫...\u0026#34; mysql -u root -p \u0026lt; $SOURCE_PATH/all_databases.sql # 解壓縮用戶家目錄到暫存目錄 echo \u0026#34;解壓縮用戶家目錄...\u0026#34; tar -xzvf $SOURCE_PATH/user1_home.tar.gz -C $TEMP_PATH # 解壓縮Apache配置到暫存目錄 echo \u0026#34;解壓縮Apache配置...\u0026#34; tar -xzvf $SOURCE_PATH/apache_configs.tar.gz -C $TEMP_PATH # 解壓縮網站資料到暫存目錄 echo \u0026#34;解壓縮網站資料...\u0026#34; tar -xzvf $SOURCE_PATH/apache_www.tar.gz -C $TEMP_PATH # 使用rsync同步用戶家目錄 echo \u0026#34;同步使用者家目錄...\u0026#34; rsync -av $TEMP_PATH/home/black/ /home/test1/ # 同步Apache配置 echo \u0026#34;同步Apache設定...\u0026#34; rsync -av $TEMP_PATH/etc/apache2/ /etc/apache2/ # 同步網站數據 echo \u0026#34;同步網站資料...\u0026#34; rsync -av $TEMP_PATH/var/www/html/ /var/www/html/ # 清理暫存目錄 echo \u0026#34;清理暫存目錄...\u0026#34; rm -rf $TEMP_PATH echo \u0026#34;恢復完成。\u0026#34; 結論 本文大概說明了如何在兩台 Linux 主機之間進行資料庫、網站數據和用戶家目錄的轉移。這些步驟適合伺服器遷移、備份以及其他需要大規模資料轉移的情境。如果在操作中遇到問題，建議檢查 SSH 連線、磁碟空間及相關權限設置。\n想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black5/","tags":null,"title":"Linux 簡易資料轉移"},{"categories":null,"contents":" 這篇文章將帶領你完成 Ubuntu 的安裝過程，適合初學者快速上手。\n安裝Ubuntu系統 步驟 1：開始安裝 下載 Ubuntu 並啟動虛擬機器後，安裝過程將自動開始，這時只需要按 Enter 開始。 選擇語言 English，然後按 Enter。 選擇 Continue without updating，跳過更新，然後按 Enter。 步驟 2：安裝選項 點選 Done 完成硬體檢查等預設設置。 選擇 Ubuntu Server 作為安裝選項，然後按 Done。 一路按 Done，跳過其他進階設置，直到出現使用者資訊填寫頁面。\nDone\nDone\nDone\nDone\nContinue\n步驟 3：設定使用者資訊 在使用者設置頁面，輸入以下資訊： Your name: \u0026ldquo;你要輸入的名字\u0026rdquo; Your server\u0026rsquo;s name: \u0026ldquo;我這邊是輸入姓氏\u0026rdquo; Pick a username: \u0026ldquo;你要輸入的名字\u0026rdquo; Choose a password: \u0026ldquo;你要輸入的密碼\u0026rdquo; Confirm your password: \u0026ldquo;確認密碼\u0026rdquo; 選擇 Skip for now，跳過系統備份設定。 步驟 4：額外設定 1.勾選 Install OpenSSH server，允許遠端連線管理，按 Done。\n完成所有設置後，等待 Reboot Now 出現再進行重啟。 步驟 5：登入系統 系統重啟後，按下Enter，再去輸入剛才設定的 帳號 和 密碼 進行登入。 2.恭喜你，Ubuntu 系統已成功安裝完成！\n不同版本的安裝過程可能會略有差異，但整體步驟大同小異。建議大家下載最新版本進行安裝，這樣可以確保系統的穩定性與相容性。\n想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black4/","tags":null,"title":"如何安裝 Ubuntu 系統"},{"categories":null,"contents":"這篇文章將帶你一步步完成 Ubuntu 的下載與在 VirtualBox 上創建虛擬機器的過程。無論你是想要學習 Linux 還是需要一個隔離的環境來進行開發，這篇教學都非常實用！\n步驟 1：下載 Ubuntu 首先，我們需要下載 Ubuntu 安裝映像檔: 打開 Google，輸入 Ubuntu 進行搜尋。 點選第一個搜尋結果：Ubuntu: Enterprise Open Source and Linux。 點選頁面上的 Download，選擇 Ubuntu Server 版本。 Ubuntu Server 是無圖形介面的版本，適合用於伺服器運行，如果你想要桌面版本，也可以選擇 Ubuntu Desktop。\n步驟 2：在 VirtualBox 創建 Ubuntu 虛擬機器 安裝 VirtualBox 擴充包: 打開 VirtualBox，進入 檔案 \u0026gt; 環境設定 \u0026gt; 擴充功能。 點選 Oracle_VM_VirtualBox_Extension_Pack-7.0.12，確保你已經安裝擴充功能。 創建新的虛擬機器 在 VirtualBox 的主畫面，點選 新增，開始創建新的虛擬機器。 設定虛擬機器的名稱、儲存位置以及 ISO 映像檔: 名稱：Ubuntu22.04.3_Server_2023.1228 資料夾：D: ISO 映像：ubuntu-22.04.3-live-server-amd64 勾選 略過無人值守安裝，然後點選 下一步。\n設定虛擬機器的資源分配： 基礎記憶體：2048MB 處理器：2 CPU 設定虛擬磁碟大小： 磁碟大小：25GB 點選 完成，虛擬機器創建成功。\n步驟 3：虛擬機器網路設定 進入虛擬機器設定，點選 網路 選項。 點擊 確定 完成設定。\n注意：不同版本的 VirtualBox 或 Ubuntu，界面和步驟可能會略有不同，但大體操作流程是相似的。建議大家下載最新版本的軟體進行操作，這樣可以確保獲得最新的功能和最佳的相容性。\n想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black3/","tags":null,"title":"下載與創建 Ubuntu 虛擬機器"},{"categories":null,"contents":"步驟 1：下載 VirtualBox 和擴充包 首先，我們需要從 VirtualBox 官網下載所需的軟體。 進入 VirtualBox 官網，選擇 VirtualBox 7.0.12 platform packages。 點選 Windows Host（如果你是使用 Windows 系統的話）。 接著，下載 VirtualBox 擴充包 7.0.12 Oracle VM VirtualBox Extension Pack，這個擴充包能提供 USB 2.0/3.0 支援、虛擬機遠端桌面協議等額外功能。 點選 All supported platforms，擴充包會適用於所有平台。 步驟 2：安裝 VirtualBox 1.下載完成後，打開安裝檔案，點選 下一步。\n持續點選 下一步，並確認所有選項符合需求。 系統可能會詢問是否允許變更你的電腦設定，選擇 是。 步驟 3：安裝擴充包 安裝 VirtualBox 完成後，打開 VirtualBox，進入 File \u0026gt; Preferences，選擇 Extensions。 點選右側的 + 按鈕，然後選擇剛才下載的擴充包檔案。 確認安裝選項，點擊 安裝。 4.等待擴充包安裝完成，這可能需要幾分鐘時間。\n安裝完成後，點擊 完成。 這就是完整的 VirtualBox 及擴充包安裝流程！希望這篇教學能幫助你順利完成安裝，開始你的虛擬機器操作之旅。如果你有任何疑問或遇到問題，歡迎留言或聯繫我。\n想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black2/","tags":null,"title":"安裝 VirtualBox 及擴充包教學"},{"categories":null,"contents":" 大家好，這是我的第一篇文章，我是一名曾經在餐廳後廚奮鬥多年的廚師，現在準備轉職到科技業，朝著開發者的目標努力！\n在過去的工作經驗中，我每天面對各種餐飲挑戰，從菜單設計到後廚管理，無不追求效率與精確。這些經歷其實與程式開發很相似，無論是準備食材還是寫程式碼，都是對細節的把控和流程的最佳化。\n現在，我運用這些技能投入到科技領域，學習了 Python 和 Spring Boot 等技術，還完成了幾個專案，包括餐飲點餐系統和 AI 專案。我深知轉職並不容易，但我對技術的熱愛和對新挑戰的渴望，讓我相信這是值得的。\n希望有一天，我能夠將廚師的敏銳思維與開發者的創意結合，為使用者提供更好的技術解決方案。\n期待未來的合作或建議，也歡迎大家給我一些鼓勵！\n感謝大家的閱讀，更多專案分享將會在後續文章中繼續更新。\n想要聯繫我，或者有合作機會？隨時歡迎寄信到：[littleblack830830@gmail.com]\n","permalink":"https://littleblackmann.github.io/blog/black1/","tags":null,"title":"小黑的第一篇文章"},{"categories":null,"contents":" ","permalink":"https://littleblackmann.github.io/blog/post-13/","tags":null,"title":""}]